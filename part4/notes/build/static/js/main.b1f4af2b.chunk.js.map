{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","getAll","a","axios","get","data","create","newObject","post","update","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","fetchData","noteService","length","notesToShow","filter","addNote","event","preventDefault","date","Date","toISOString","Math","random","returnedNote","prev","toggleImportanceOf","find","n","_id","map","request","status","response","JSON","stringify","setTimeout","onSubmit","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"8NAWeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,iBCLpCK,EAAU,aAEVC,EAAM,uCAAG,sBAAAC,EAAA,sEACCC,IAAMC,IAAIJ,GADX,uCACqBK,MADrB,2CAAH,qDAINC,EAAM,uCAAG,WAAOC,GAAP,SAAAL,EAAA,sEACCC,IAAMK,KAAKR,EAASO,GADrB,uCACiCF,MADjC,2CAAH,sDAINI,EAAM,uCAAG,WAAOC,EAAIH,GAAX,SAAAL,EAAA,sEACCC,IAAMQ,IAAN,UAAaX,EAAb,YAAwBU,GAAMH,GAD/B,uCAC2CF,MAD3C,2CAAH,wDAIG,GACbJ,SACAK,SACAG,UCbaG,EALM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EAAyB,KACtB,qBAAKhB,UAAU,QAAf,SAAwBgB,KCclBC,EAhBA,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GC6ESC,EAhFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,QAAQC,IAAI,UACZ,IAAMC,EAAS,uCAAG,sBAAA9B,EAAA,kEAChBoB,EADgB,SACDW,EAAYhC,SADX,kCAEhB6B,QAAQC,IAAI,qBAFI,2CAAH,qDAIfC,MACC,IAEHF,QAAQC,IAAI,SAAUV,EAAMa,OAAQ,SAEpC,IAAMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAC3C,GAAD,OAAUA,EAAKG,aAE5DyC,EAAO,uCAAG,WAAOC,GAAP,eAAApC,EAAA,6DACdoC,EAAMC,iBADQ,SAEaN,EAAY3B,OAAO,CAC5CR,QAASyB,EACTiB,MAAM,IAAIC,MAAOC,cACjB9C,UAAW+C,KAAKC,SAAW,KALf,OAERC,EAFQ,OAOdvB,GAAS,SAACwB,GAAD,4BAAcA,GAAd,CAAoBD,OAC7BrB,EAAW,IARG,2CAAH,sDAWPuB,EAAkB,uCAAG,WAAOrC,GAAP,iBAAAR,EAAA,6DACnBT,EAAO4B,EAAM2B,MAAK,SAACC,GAAD,OAAOA,EAAEC,MAAQxC,KADhB,kBAGIuB,EAAYxB,OAAOC,EAAnB,2BACtBjB,GADsB,IAEzBG,WAAYH,EAAKG,aALI,OAGjBiD,EAHiB,OAOvBvB,GAAS,SAACwB,GAAD,OACPA,EAAKK,KAAI,SAAC1D,GAAD,OAAWA,EAAKyD,MAAQxC,EAAKmC,EAAepD,QARhC,gDAWE,MAAzB,KAAM2D,QAAQC,QAA4C,MAA1B,KAAMC,SAASD,OAC3CzB,EAAgB,aAAD,OACAnC,EAAKK,QADL,0CAGf8B,EAAgB2B,KAAKC,UAAL,OACpBC,YAAW,kBAAM7B,EAAgB,QAAO,KACxCN,GAAS,SAACwB,GAAD,OAAUA,EAAKV,QAAO,SAACa,GAAD,OAAOA,EAAEC,MAAQxC,QAjBzB,yDAAH,sDAqBxB,OACE,gCACE,uCACA,cAAC,EAAD,CAAcG,QAASc,IACvB,yBAAQ5B,QAAS,kBAAM2B,GAAW,SAACoB,GAAD,OAAWA,MAA7C,kBACQrB,EAAU,YAAc,SAEhC,6BACGU,EAAYgB,KAAI,SAAC1D,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAAMqD,EAAmBtD,EAAKyD,OAF3CzD,EAAKyD,UAMhB,uBAAMQ,SAAUrB,EAAhB,UACE,uBACEsB,KAAK,OACLC,MAAOrC,EACPsC,SAAU,SAACvB,GAAD,OAAWd,EAAWc,EAAMwB,OAAOF,UAE/C,wBAAQD,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC7ENI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b1f4af2b.chunk.js","sourcesContent":["const Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = async () => {\n  return (await axios.get(baseUrl)).data;\n};\n\nconst create = async (newObject) => {\n  return (await axios.post(baseUrl, newObject)).data;\n};\n\nconst update = async (id, newObject) => {\n  return (await axios.put(`${baseUrl}/${id}`, newObject)).data;\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n","const Notification = ({ message }) => {\n  if (message === null) return null;\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","const Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2021\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    console.log(\"effect\");\n    const fetchData = async () => {\n      setNotes(await noteService.getAll());\n      console.log(\"promise fulfilled\");\n    };\n    fetchData();\n  }, []);\n\n  console.log(\"render\", notes.length, \"notes\");\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  const addNote = async (event) => {\n    event.preventDefault();\n    const returnedNote = await noteService.create({\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    });\n    setNotes((prev) => [...prev, returnedNote]);\n    setNewNote(\"\");\n  };\n\n  const toggleImportanceOf = async (id) => {\n    const note = notes.find((n) => n._id === id);\n    try {\n      const returnedNote = await noteService.update(id, {\n        ...note,\n        important: !note.important,\n      });\n      setNotes((prev) =>\n        prev.map((note) => (note._id === id ? returnedNote : note))\n      );\n    } catch (error) {\n      error.request.status === 404 || error.response.status === 404\n        ? setErrorMessage(\n            `the note '${note.content}' was already deleted from the server`\n          )\n        : setErrorMessage(JSON.stringify(error));\n      setTimeout(() => setErrorMessage(null), 5000);\n      setNotes((prev) => prev.filter((n) => n._id !== id));\n    }\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <button onClick={() => setShowAll((prev) => !prev)}>\n        show {showAll ? \"important\" : \"all\"}\n      </button>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note._id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note._id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          type=\"text\"\n          value={newNote}\n          onChange={(event) => setNewNote(event.target.value)}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}